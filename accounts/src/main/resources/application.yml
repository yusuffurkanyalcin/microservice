server:
  port: 8080
spring:
  application:
    name: "accounts"
  config:
    import: "optional:configserver:http://localhost:8071/"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication # birden fazla function olduğunda ; işareti ile ayırabiliriz function1; function2; function3
    stream:
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication
      kafka:
        binder:
          brokers:
            - localhost:59092


resilience4j:
  circuitbreaker:
    circuit-breaker-aspect-order: 1
    configs:
      default:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
  retry:
    retry-aspect-order: 3
    configs:
      default:
        maxAttempts: 3
        waitDuration: 100
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        ignoreExceptions:
          - java.lang.NullPointerException
        retryExceptions:
          - java.util.concurrent.TimeoutException  # only happen in case of TimeoutException
    instances:
      getContactInfoRetry:
        maxAttempts: 3
        waitDuration: 100
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        ignoreExceptions:
          - java.lang.NullPointerException
        retryExceptions:
          - java.util.concurrent.TimeoutException  # only happen in case of TimeoutException

  ratelimiter:
    rate-limiter-aspect-order: 2
    configs:
      default:
        timeoutDuration: 1000
        limitRefreshPeriod: 5000
        limitForPeriod: 1
    instances:
      getContactInfoRateLimiter:
        timeoutDuration: 5000
        limitRefreshPeriod: 5000
        limitForPeriod: 4

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Furkan Bank Accounts Application"
    version: "1.0.0"
    author: "Yusuf Furkan Yalçın"

endpoints:
  shutdown:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

logging:
  level:
    com:
      example:
        accounts: DEBUG